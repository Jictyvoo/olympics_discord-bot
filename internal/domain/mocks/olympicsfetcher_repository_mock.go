// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jictyvoo/olympics_data_fetcher/internal/domain/usecases (interfaces: OlympicsFetcher,AccessDatabaseRepository)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/olympicsfetcher_repository_mock.go -package=mocks github.com/jictyvoo/olympics_data_fetcher/internal/domain/usecases OlympicsFetcher,AccessDatabaseRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	entities "github.com/jictyvoo/olympics_data_fetcher/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockOlympicsFetcher is a mock of OlympicsFetcher interface.
type MockOlympicsFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockOlympicsFetcherMockRecorder
}

// MockOlympicsFetcherMockRecorder is the mock recorder for MockOlympicsFetcher.
type MockOlympicsFetcherMockRecorder struct {
	mock *MockOlympicsFetcher
}

// NewMockOlympicsFetcher creates a new mock instance.
func NewMockOlympicsFetcher(ctrl *gomock.Controller) *MockOlympicsFetcher {
	mock := &MockOlympicsFetcher{ctrl: ctrl}
	mock.recorder = &MockOlympicsFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOlympicsFetcher) EXPECT() *MockOlympicsFetcherMockRecorder {
	return m.recorder
}

// FetchDataFromDay mocks base method.
func (m *MockOlympicsFetcher) FetchDataFromDay(arg0 time.Time) ([]entities.OlympicEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDataFromDay", arg0)
	ret0, _ := ret[0].([]entities.OlympicEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDataFromDay indicates an expected call of FetchDataFromDay.
func (mr *MockOlympicsFetcherMockRecorder) FetchDataFromDay(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDataFromDay", reflect.TypeOf((*MockOlympicsFetcher)(nil).FetchDataFromDay), arg0)
}

// FetchDisciplines mocks base method.
func (m *MockOlympicsFetcher) FetchDisciplines() ([]entities.Discipline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDisciplines")
	ret0, _ := ret[0].([]entities.Discipline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDisciplines indicates an expected call of FetchDisciplines.
func (mr *MockOlympicsFetcherMockRecorder) FetchDisciplines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDisciplines", reflect.TypeOf((*MockOlympicsFetcher)(nil).FetchDisciplines))
}

// MockAccessDatabaseRepository is a mock of AccessDatabaseRepository interface.
type MockAccessDatabaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccessDatabaseRepositoryMockRecorder
}

// MockAccessDatabaseRepositoryMockRecorder is the mock recorder for MockAccessDatabaseRepository.
type MockAccessDatabaseRepositoryMockRecorder struct {
	mock *MockAccessDatabaseRepository
}

// NewMockAccessDatabaseRepository creates a new mock instance.
func NewMockAccessDatabaseRepository(ctrl *gomock.Controller) *MockAccessDatabaseRepository {
	mock := &MockAccessDatabaseRepository{ctrl: ctrl}
	mock.recorder = &MockAccessDatabaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessDatabaseRepository) EXPECT() *MockAccessDatabaseRepositoryMockRecorder {
	return m.recorder
}

// InsertCountries mocks base method.
func (m *MockAccessDatabaseRepository) InsertCountries(arg0 []entities.CountryInfo) ([]entities.Identifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCountries", arg0)
	ret0, _ := ret[0].([]entities.Identifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCountries indicates an expected call of InsertCountries.
func (mr *MockAccessDatabaseRepositoryMockRecorder) InsertCountries(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCountries", reflect.TypeOf((*MockAccessDatabaseRepository)(nil).InsertCountries), arg0)
}

// InsertCountry mocks base method.
func (m *MockAccessDatabaseRepository) InsertCountry(arg0 entities.CountryInfo) (entities.Identifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCountry", arg0)
	ret0, _ := ret[0].(entities.Identifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCountry indicates an expected call of InsertCountry.
func (mr *MockAccessDatabaseRepositoryMockRecorder) InsertCountry(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCountry", reflect.TypeOf((*MockAccessDatabaseRepository)(nil).InsertCountry), arg0)
}

// SaveCompetitor mocks base method.
func (m *MockAccessDatabaseRepository) SaveCompetitor(arg0 entities.OlympicCompetitors) (entities.Identifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCompetitor", arg0)
	ret0, _ := ret[0].(entities.Identifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCompetitor indicates an expected call of SaveCompetitor.
func (mr *MockAccessDatabaseRepositoryMockRecorder) SaveCompetitor(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCompetitor", reflect.TypeOf((*MockAccessDatabaseRepository)(nil).SaveCompetitor), arg0)
}

// SaveDisciplines mocks base method.
func (m *MockAccessDatabaseRepository) SaveDisciplines(arg0 []entities.Discipline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDisciplines", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDisciplines indicates an expected call of SaveDisciplines.
func (mr *MockAccessDatabaseRepositoryMockRecorder) SaveDisciplines(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDisciplines", reflect.TypeOf((*MockAccessDatabaseRepository)(nil).SaveDisciplines), arg0)
}

// SaveEvent mocks base method.
func (m *MockAccessDatabaseRepository) SaveEvent(arg0 entities.OlympicEvent, arg1 map[entities.Identifier]*entities.Results) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEvent indicates an expected call of SaveEvent.
func (mr *MockAccessDatabaseRepositoryMockRecorder) SaveEvent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEvent", reflect.TypeOf((*MockAccessDatabaseRepository)(nil).SaveEvent), arg0, arg1)
}
