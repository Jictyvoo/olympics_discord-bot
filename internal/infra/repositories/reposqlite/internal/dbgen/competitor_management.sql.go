// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: competitor_management.sql

package dbgen

import (
	"context"
)

const GetCompetitorByCountry = `-- name: GetCompetitorByCountry :many
SELECT c.id,
       c.code,
       c.name,
       c.country_id
FROM competitors c
         JOIN
     country_infos ci ON c.country_id = ci.id
WHERE ci.iso_code_len2 = ?
   OR ci.iso_code_len3 = ?
`

type GetCompetitorByCountryParams struct {
	IsoCodeLen2 interface{} `db:"iso_code_len2"`
	IsoCodeLen3 string      `db:"iso_code_len3"`
}

type GetCompetitorByCountryRow struct {
	ID        int64  `db:"id"`
	Code      string `db:"code"`
	Name      string `db:"name"`
	CountryID int64  `db:"country_id"`
}

func (q *Queries) GetCompetitorByCountry(ctx context.Context, arg GetCompetitorByCountryParams) ([]GetCompetitorByCountryRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCompetitorByCountry, arg.IsoCodeLen2, arg.IsoCodeLen3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCompetitorByCountryRow{}
	for rows.Next() {
		var i GetCompetitorByCountryRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.CountryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCompetitorByName = `-- name: GetCompetitorByName :one
SELECT c.id,
       c.code,
       c.name,
       c.country_id
FROM competitors c
WHERE c.id = ?
`

type GetCompetitorByNameRow struct {
	ID        int64  `db:"id"`
	Code      string `db:"code"`
	Name      string `db:"name"`
	CountryID int64  `db:"country_id"`
}

func (q *Queries) GetCompetitorByName(ctx context.Context, id int64) (GetCompetitorByNameRow, error) {
	row := q.db.QueryRowContext(ctx, GetCompetitorByName, id)
	var i GetCompetitorByNameRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.CountryID,
	)
	return i, err
}

const SaveCompetitor = `-- name: SaveCompetitor :one
INSERT OR
REPLACE INTO competitors (code, name, country_id)
VALUES (?, ?, ?)
RETURNING id
`

type SaveCompetitorParams struct {
	Code      string `db:"code"`
	Name      string `db:"name"`
	CountryID int64  `db:"country_id"`
}

func (q *Queries) SaveCompetitor(ctx context.Context, arg SaveCompetitorParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, SaveCompetitor, arg.Code, arg.Name, arg.CountryID)
	var id int64
	err := row.Scan(&id)
	return id, err
}
